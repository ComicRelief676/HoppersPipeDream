#include <iostream>
#include <fstream> // allows us to pull from files
#include <string>
#include <vector>
#include "Color.h"

// function prototyping / declaration
std::string getFileName();
std::vector<std::string> copyFile();
std::vector<std::string> removeNesting(std::vector<std::string> input);
std::vector<int> functionChecker(std::vector<std::string> input);
std::vector<int> commentCheckerSingle(std::vector<std::string> input);
std::vector<std::string> commentBlockChecker(std::vector<std::string> input);
std::vector<int> parseCommentBlock(std::vector<std::string> commentBlockVector, std::string checker);
void displayFile(std::vector<std::string> fileToPrint);
void displayFile(std::vector<int> fileToPrint);
std::vector<std::string> compileDescription(std::vector<std::string> oldDescription, std::vector<int> input, std::string description);

/********************************************************************
* getFileName()
* 	This function will ask the user to input a file name from
* 	the current directory, then returns the file name
********************************************************************/
std::string getFileName() {
	
	std::string fileName;
	color("magenta");
	std::cout << "Input the name of the file you want to auto-grade (example: Item.txt):" << std::endl;
	color("reset");
	std::cin >> fileName;
	return fileName;
}

/********************************************************************
* copyFile()
*	This function takes the name of a file from the current
* 	directory, copies every line of that file to a vector, then
* 	returns the vector
********************************************************************/
std::vector<std::string> copyFile() {
	bool success = true;
	std::ifstream inputFile;
	do {
		// asks user for the file path 
		std::string fileName = getFileName();
		inputFile.open(fileName);
		if (!inputFile) { // Check if the file opened successfully
			std::cerr << "Error opening file: " << fileName << std::endl;
			success = false;
		}
		// If there are no issues
		else {
			success = true;
		}
	} while (!success);

	// Vector to store all the lines from the opened File
	std::vector<std::string> lines; 
	// variable that is used to pass line values through
	std::string line;

	// Read each line from the file and store it in the vector
	while (std::getline(inputFile, line)) {
		lines.push_back(line);
	}

	inputFile.close(); // Closes the file
	return lines;
}

/******************************************************************************
* removeNesting(std::vector<std::string> input)
*	Removes all nesting from the file and returns the file unnested
******************************************************************************/
std::vector<std::string> removeNesting(std::vector<std::string> input) {
	// Loops through each line
	for (int i = 0; i < input.size(); i++) {
		if (input[i].length() > 1) {
			//Loops through removing each space
			while (input[i].at(0) == ' ' || input[i].at(0) == '\t') {
				input[i] = input[i].substr(1, input[i].length());
			}
		}
	}
	return input;
}

/********************************************************************
*	functionChecker()
*	This will find all of the function definitions. It will check
* for parenthesis and an open brack '{' after making sure the line
* is not an if, while, for, or else if statement because those
* also have () and {
********************************************************************/
std::vector<int> functionChecker(std::vector<std::string> input) {
	// Check if the first word is 'for' or 'while'
	std::vector<int> functionPos;

	// if the line is actually a for, while, or if condition, skip this line becuase those have () and { but aren't function declarations
	bool forWhileIf = false;
	for (int i = 0; i < input.size(); i++) {
		if ((input[i].substr(0, 3) == "for" || input[i].substr(0, 5) == "while")||(input[i].substr(0, 2) == "if" || input[i].substr(0, 7) == "else if")) {
			forWhileIf = true;
		}
		else {
			forWhileIf = false;
		}

		// now check to see if there is an open parenthesis, close par, and open bracket
		bool openPar = false;
		bool closePar = false;
		bool openBrac = false;
		if (!forWhileIf) {
			for (int j = 0; j < input[i].length(); j++) {
				if (input[i].at(j) == '{') {
					openBrac = true;
				}
				if (input[i].at(j) == '(') {
					openPar = true;
				}
				if (input[i].at(j) == ')') {
					closePar = true;
				}
			}
		}
		// when we have determined that this line is a function declaration, return this line
		if ((openPar && closePar) && openBrac) {
			functionPos.push_back(i);
		}
	}
	return functionPos;	
}

/*******************************************************************
*	commentChecker(vector<string> input)
*	This function will checck for psuedocode and comments on their
* own line, as well as comments that occur after code
********************************************************************/
std::vector<int> commentCheckerSingle(std::vector<std::string> input) {
	// make a variable to store in line comment positions
	std::vector<int> commentPos;
	for (int i = 0; i < input.size(); i++) {
		if (input[i].length() > 1) {
			for (int j = 0; j < input[i].length() - 1; j++) {
				// check to see if this line is a comment anywhere on the line
				if (input[i].substr(j, 2) == "//") {
					// if this line is a comment, save this line to vector
					commentPos.push_back(i);
					// we only want to save a line once if it has a comment, so
					// move to the next line after we determine this one has a comment
					j = input[i].length();
				}
			}
		}
	}
	// return vector with all the lines that have comments
	return commentPos;
}

/*******************************************************************
*	commentBlockChecker(vector<string input)
*	Checks the file for where comment blocks are located, where they
* start and where they end
********************************************************************/
std::vector<std::string> commentBlockChecker(std::vector<std::string> input) {
	// make a variable to store comment block pos
	std::vector<std::string> commentBlockPos;


	for (int i = 0; i < input.size(); i++) {
		// have a variable to see if we are already in a comment block
		// We dont want two comment block from one line if for example: /****/***
		// is one comment block but might be saved as two starts to one
		bool comment = false;
		if (input[i].length() > 0) {
			for (int j = 0; j < input[i].length() - 1; j++) {
				if (input[i].substr(j, 2) == "/*" && !comment) {
					comment = true;
					// if the value starts with 01, it is the start of a comment block
					commentBlockPos.push_back("01 " + std::to_string(i));
					j = input[i].length();
				}
				else if (input[i].substr(j, 2) == "*/") {
					comment = false;
					// if it starts with 02, it will be the end
					commentBlockPos.push_back("02 " + std::to_string(i));
					j = input[i].length();
				}
			}
		}
	}
	// return the lines with comment block starts and ends
	return commentBlockPos;
}

/*******************************************************************
* parseCommentBlock(vector<string>
*	This function will parse the returned statements from
*	commentBlockChecker() and check if they are either opening
*	or closing based on the std::string checker passed
*	It will then return the respective lines
********************************************************************/
std::vector<int> parseCommentBlock(std::vector<std::string> commentBlockVector, std::string checker) {
	// we will be given a string in the form xx xxx, where the first two xx's are if starting/ending cmb (01/02)
	// and the everything after that is the line it can be found on(line:139)
	std::vector<int> commentBlockLn;
	for (int i = 0; i < commentBlockVector.size(); i++) {
		if (commentBlockVector[i].substr(0,2) == checker) {
			commentBlockLn.push_back(std::stoi(commentBlockVector[i].substr(3, commentBlockVector[i].length())));
		}
	}
	return commentBlockLn;
}


/******************************************************************************
* displayFile(std::vector<std::string> fileToPrint)
*	This will fully print out a std::vector<std::string> that is passed into it
******************************************************************************/
void displayFile(std::vector<std::string> fileToPrint) {
	for (const auto& str : fileToPrint) {
		std::cout << str << std::endl; // Outputs cleaned strings
	}
}

/******************************************************************************
* displayFile(std::vector<std::string> fileToPrint)
*	This will fully print out a std::vector<int> that is passed into it
******************************************************************************/
void displayFile(std::vector<int> fileToPrint) {
	for (const auto& str : fileToPrint) {
		std::cout << str << std::endl; // Outputs cleaned strings
	}
}

/******************************************************************************
*	compileDescription(vector<string> oldDescription, vector<int> input, string description)
*	this will take a vector of numbers and add the 'description' to a new vector
* and then return the new vector with added description elements
******************************************************************************/
std::vector<std::string> compileDescription(std::vector<std::string> oldDescription, std::vector<int> input, std::string description) {
	// stub function
	return oldDescription;
}

/******************************************************************************
* std::vector<int> commentBlockConcatenation(std::vector<int> Start, std::vector<int> End)
*	This function will find every line that is a comment block, and return that vector
******************************************************************************/
std::vector<int> commentBlockConcatenation(std::vector<int> start, std::vector<int> end) {
	std::vector<int> commentBlockLines;
	// loops through lines before the last value in End
	for (int i = 0; i < start.size() && i < end.size(); i++) {
		std::cout << "We got here gang! " << std::endl;

		int j = start[i];
		while (j <= end[i]) {
			std::cout << "We goat here gang! " << std::endl;

			commentBlockLines.push_back(j);
			j++;
		}
		std::cout << "We got! " << std::endl;
	}
	std::cout << "We got gang! " << std::endl;

	return commentBlockLines;
}

/******************************************************************************
* void debugPrint(desc, descColor, item, itemColor)
*	This function is for debugging, it will take a description and print it out
* in white as default or as descColor, then it will display a vector in a
* designated color
******************************************************************************/
void debugPrint(std::vector<std::string> item, std::string desc = "debugPrint:", std::string itemColor = "red", std::string descColor = "white") {
	color(descColor);
	std::cout << desc << std::endl;
	color(itemColor);
	displayFile(item);
	color("reset");
}

/******************************************************************************
* void debugPrint(desc, descColor, item, itemColor)
*	Overloaded version for int vectors
******************************************************************************/
void debugPrint(std::vector<int> item, std::string desc = "debugPrint:", std::string itemColor = "red", std::string descColor = "white") {
	color(descColor);
	std::cout << desc << std::endl;
	color(itemColor);
	displayFile(item);
	color("reset");
}

/******************************************************************************
* std::vector<int> emptyLnChecker(std::vector<std::string> input)
*	Checks for and returns empty line locations
******************************************************************************/
std::vector<int> emptyLnChecker(std::vector<std::string> input) {
	// vector for storing empty line locations
	std::vector<int> emptyLns;
	for (int i = 0; i < input.size(); i++) {
		if(input[i] == "") {
			emptyLns.push_back(i);
		}
	}
	return emptyLns;
}

// this function will check to see if there is a comment block above the function,
// it will also make sure the top and bottom have the same # of *'s, and 50<*<150
std::vector<std::string> functionCommentBlocks(std::vector<int> functionLns, std::vector<int> commentBlkStart, std::vector<int> commentBlkEnd, std::vector<std::string> file) {
		// (is there a comment block) (are they the same length) (is opening too short) (is closing too short) (is opening too long) (is closing too long)
		// ex: "1 0 1 0 1 0 1 ";
		std::vector<std::string> functionAssessment;


	for (int i = 0; i < functionLns.size(); i++) {
		int commentBlockPos = 0;
		bool isCommentBlock = false;
		std::string assessment;
		
		for (int j = 0; j < commentBlkEnd.size(); j++) {
			// checks if the line above a function has a comment block end above it
			if (functionLns[i] == commentBlkEnd[j] + 1) {
				commentBlockPos = j;
				j = commentBlkEnd.size();
				isCommentBlock = true;
			}
		}
		// Returns '0' if there is no comment block, '1' if there is one
		if (!isCommentBlock) {
					assessment = "0";
		} else {
			assessment = "1";
			
			// checks if the start and end are the same length
			if (file[commentBlkEnd[commentBlockPos]] != file[commentBlkStart[commentBlockPos]]) {
				assessment += " 0";
			} else {
				assessment += " 1";
			}

			// checks if the start is smaller than 50
			if (file[commentBlkStart[commentBlockPos]].length() < 50) {
				assessment += " 0";
			} else {
				assessment += " 1";
			}

			// checks of the end is smaller than 50
			if (file[commentBlkEnd[commentBlockPos]].length() < 50) {
				assessment += " 0";
			} else {
				assessment += " 1";
			}

			// checks if the start is greater than 150
			if (file[commentBlkStart[commentBlockPos]].length() > 150) {
				assessment += " 0";
			} else {
				assessment += " 1";
			}

			// checks if the end is greater than 150
			if (file[commentBlkEnd[commentBlockPos]].length() > 150) {
				assessment += " 0";
			} else {
				assessment += " 1";
			}
		}
		functionAssessment.push_back(assessment);
	}
	return functionAssessment;
}

